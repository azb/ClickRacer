<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ide_controller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Configuration - Edit me

// Screen scale setting for desktop and mobile
if (global.DEVICE_IS_TOUCH) screen_scale_type = SCREEN_FIT; //Use FIT or FILL on mobile
                       else screen_scale_type = SCREEN_FIX; //Use FIX or FULL on desktop
                 
//Keep the window in the center     
center_screen = YES;       

//Lock the size of the view width and height (but not the port)
view_size_locked = YES;   

//Rate that the address bar hides. Do not lower this - it isn't user friendly
hide_address_timer = room_speed*4;  

//The rate at which to update the screen size (lower value = hungrier processing)
refresh_rate = 5 + (global.DEVICE_IS_TOUCH*5); 

//Whether to tween the screen sizing on desktop (smooth)
use_tweening_on_desktop = YES;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do not modify
//(Unless you know what you're doing!)

if (view_enabled){
    game_width = view_wport[0];    //The desired width of the screen
    game_height = view_hport[0];  //The desired height of the screen
} else {
    game_width = room_width;    //The desired width of the screen
    game_height = room_height;  //The desired height of the screen
}

bw = browser_width;         //The width of the browser
bh = browser_height;        //The height of the browser

vwv = view_wview[0];
vhv = view_hview[0];
vwp = view_wport[0];
vhp = view_hport[0];

// SCREEN ROTATION
desired_rotation = game_height &gt; game_width;   //OR manually choose LANDSCAPE / PORTRAIT constants
actual_rotation = 0;
is_wrong_rotation = false;  //If the screen is the wrong rotation
turn_angle = 0;             //This is used for the 'please rotate' message
scale = 1;

//The scale of the view
view_scale = view_wview[0]/view_wport[0]; 

//Tweening (Desktop only)
if (use_tweening_on_desktop == YES){     
tween_x = TweenCreate(id);
tween_y = TweenCreate(id);
}

x = game_width; y = game_height;

//Set alarms
alarm[0] = 1;                               //This alarm re-sizes the screen
if (global.DEVICE_IS_TOUCH)alarm[1] = 1;    //This alarm hides the address bar

//Reset screen size on room change
room_change_reset = YES;  

sprite_index = -1;          //Remove my sprite
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hide address bar
alarm[1] = hide_address_timer;
jchtml5_hide_address_bar();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do not modify

//// Resize the screen

//Reset the alarm
alarm[0] = refresh_rate;

if (is_wrong_rotation){
    //Set the size of the screen
    display_set_gui_size(browser_width,browser_height+1);
    window_set_size(display_get_gui_width(),display_get_gui_height()+1);
    window_set_position(0,0);
    alarm[0] = -1;
    exit;
}

var nw,nh;

bw = browser_width;
bh = browser_height;

if (screen_scale_type == SCREEN_FIT){   
    if (actual_rotation == LANDSCAPE){
        nw = bw;nh = (nw/game_width)*game_height;
        if (nh &gt; bh){nh = bh; nw = nh*(game_width/game_height);}
    } else {
        nh = bh;nw = (nh/game_height)*game_width;  
        if (nw &gt; bw){nw = bw; nh = round(nw*(game_height/game_width));}
    }
} else if (screen_scale_type == SCREEN_FILL){  
    if (actual_rotation == LANDSCAPE){
        nh = bh; nw = (nh/game_height)*game_width; 
    } else {
        nw = bw; nh = (nw/game_width)*game_height;  
    }
} else if (screen_scale_type == SCREEN_FULL){  
    nw = game_width;
    nh = game_height;
} else if (screen_scale_type == SCREEN_FLEX){  
    nw = bw;
    nh = bh;
} else if (screen_scale_type == SCREEN_FIX){  
    if (actual_rotation == LANDSCAPE){
        nw = min(game_width,bw);
        nh = (nw/game_width)*game_height;
        if (nh &gt; bh){nh = bh; nw = nh*(game_width/game_height);}
    } else {
        nh = min(game_height,bh);
        nw = (nh/game_height)*game_width;  
        if (nw &gt; bw){nw = bw; nh = nw*(game_height/game_width);}
    }
}

if (os_type != browser_not_a_browser){
    if (center_screen)window_set_position(max(0,(bw*.5)-nw*.5), max(0,(bh*.5)-nh*.5));
}

if (global.DEVICE_IS_TOUCH) {
    if (window_get_width() != round(nw)){
        nw = round(nw);
        nh = round(nh);
        window_set_size(nw,nh);
        display_set_gui_size(nw,nh);
    }
} else {
    if (use_tweening_on_desktop){
        if !(TweenIsActive(tween_x)){
            TweenPlayOnce(tween_x, x__, x, nw, room_speed*.34, EaseInOutCubic);
            TweenPlayOnce(tween_y, y__, y, nh, room_speed*.34, EaseInOutCubic);
        }
    } else {
        x = nw;y = nh;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do not modify

//Check if rotation is wrong, set desktop size
if (global.DEVICE_IS_TOUCH){
    actual_rotation = browser_width &lt; browser_height;
    
    // If the actual rotation is not the desired rotation
    if (actual_rotation != desired_rotation){
        if (global.DEVICE_IS_BIG)turn_angle-=2;
        if !(is_wrong_rotation){
            is_wrong_rotation = true;
            
            while(sprite_get_width(spr_rotate_text)*scale &gt; browser_width*.85){
                scale *= 0.5;
            }
            instance_deactivate_all(true);
            alarm[1] = 5;
        }  
    } else {
        if (is_wrong_rotation){
            is_wrong_rotation = false;
            alarm[1] = 5;
            alarm[0] = 1;
            instance_activate_all();
        }
    }
} else {
    actual_rotation = browser_width &lt; browser_height+320;
    window_set_size(x,y);
    display_set_gui_size(x,y);
    if (center_screen)window_center();
}

//--------------------------------------------------------

///Views
if (view_enabled){    
    view_wport[0] = window_get_width();
    view_hport[0] = window_get_height();
        
    if (view_size_locked = OFF){ 
        view_wview[0] = window_get_width()*view_scale;
        view_hview[0] = window_get_height()*view_scale;
    } else {
        view_wview[0] = vwv;
        view_hview[0] = vhv;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do not modify

///Set room_speed for all rooms
room_speed = global.ROOM_SPEED;

if !(room_change_reset)exit;

if (view_enabled){
    game_width = view_wport[0];    //The desired width of the screen
    game_height = view_hport[0];  //The desired height of the screen
} else {
    game_width = room_width;    //The desired width of the screen
    game_height = room_height;  //The desired height of the screen
}

vwv = view_wview[0];
vhv = view_hview[0];
vwp = view_wport[0];
vhp = view_hport[0];

// SCREEN ROTATION
desired_rotation = game_height &gt; game_width;   //OR manually choose LANDSCAPE / PORTRAIT constants

//The scale of the view
view_scale = view_wview[0]/view_wport[0]; 

//Tweening (Desktop only)
if (use_tweening_on_desktop == YES){     
tween_x = TweenCreate(id);
tween_y = TweenCreate(id);
}

x = game_width; y = game_height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ask user to rotate screen 

//Only edit this if you are unhappy with the default rotate message

if (is_wrong_rotation) {
    window_set_size(browser_width,browser_height);
    display_set_gui_size(browser_width,browser_height);
            
    /*Draw the background. To change the background color, edit bg_rotate_background. 
    Drawing a stretched background is a workaround for a bug in some browsers*/
    draw_background_stretched(bg_rotate_background,0,0,display_get_gui_width(),display_get_gui_height());
    
    if (actual_rotation == LANDSCAPE){
        //Draw the 'please rotate' images (landscape mode, so not much height room)
        draw_sprite_ext(spr_rotate_text,0,display_get_gui_width()*.5,display_get_gui_height()*.5,scale,scale,0,c_white,1);
    } else {
        //Draw the 'please rotate' images (portrait mode, so plenty of height room)
        draw_sprite_ext(spr_rotate_text,0,display_get_gui_width()*.5,display_get_gui_height()*.8,scale,scale,0,c_white,1);
        draw_sprite_ext(spr_rotate_mobile,0,display_get_gui_width()*.5,display_get_gui_height()*.4,scale,scale,0,c_white,1);
        draw_sprite_ext(spr_rotate_arrow,0,display_get_gui_width()*.5,display_get_gui_height()*.4,scale,scale,turn_angle,c_white,1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
