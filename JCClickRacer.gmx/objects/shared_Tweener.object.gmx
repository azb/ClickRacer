<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Tweening System

//---------------------------------------------------
// Version 0.92
//---------------------------------------------------

// Assign self as shared tweener singleton
global.TGMS_SharedTweener = id;

tick = 0; // System update timer
isActive = true; // System active state boolean
keepAlive = false; // True if tweens used in persistent room
timeScale = 1.0; // Effects overall speed of how fast system plays tweens/delays
updateInterval = 1.0; // Sets how often (in steps) system will update (1 = default, 2 = half speed, 0.5 = double speed) DO NOT set as 0 or below!
tweenDefaultTimeScale = 1.0; // The time scale to be a assigned to a newly created tween
deltaTime = delta_time / 1000000; // Used for managing delta tweens
minDeltaFPS = 15; // The lowest framerate before delta tweens will begin to lag behind. Ideally, keep between 10-25.
maxDelta = 1 / minDeltaFPS; // Cache delta cap
useSimpleDeltaTweens = false; // Sets simple tweens as using delta or step timing
destroyStackMaxPop = 5; // Used by auto-cleaner. Limits, each step, number of tweens destroyed. Increase only if creating, on average, 5+ tweens per step. (Default = 5)

tweens = ds_list_create(); // Stores automated tweens
delayedTweens = ds_list_create(); // Stores tween delay data
simpleTweens = ds_map_create(); // Keeps track of existing simple tweens
pRoomTweens = ds_map_create(); // Associates persistent rooms with stored tween lists
pRoomDelays = ds_map_create(); // Associates persistent rooms with stored tween delay lists
destroyStack = ds_stack_create(); // Stores tweens designated for destruction
delayCleaner = ds_priority_create(); // Stores tween delay data designated for destruction
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// System Clean Up

// Remove self as shared tweener singleton
global.TGMS_SharedTweener = noone;

// Cache tweens list
var _tweens = tweens;

//---------------------------------------------
// Destroy remaining tweens
//---------------------------------------------
var _index = ds_list_size(_tweens);
while (_index--)
{
    // cache tween
    var _tween = ds_list_find_value(_tweens, _index); 
    
    //  Destroy Tween Events
    for (var _index = 13; _index &lt;= 20; _index++)
    {
        // IF event initialized, destroy all callbacks attached to it
        if (ds_list_find_value(_tween, _index) != -1)
        {
            // Cache event
            var _event = ds_list_find_value(_tween, _index); 
            
            // Cache number of callbacks attached to event
            var _num = ds_list_size(_event);
            
            // Cycle through all callbacks
            while(_num--)
            {                    
                // Destroy callback
                ds_list_destroy(ds_list_find_value(_event, _num)); 
            }
            
            // Destroy event
            ds_list_destroy(_event); 
        }
    }
        
    //  Destroy tween data
    ds_list_destroy(_tween); 
}

//---------------------------------------
// Ensure Delayed Tweens are Destroyed
//---------------------------------------
var _index = ds_list_size(delayedTweens);
while(_index--)
{
    ds_list_destroy(ds_list_find_value(delayedTweens, _index));
}

//---------------------------------------
// Destroy Tweens for Persistent Rooms
//---------------------------------------
repeat(ds_map_size(pRoomTweens))
{
    var _key = ds_map_find_first(pRoomTweens);
    var _queue = ds_map_find_value(pRoomTweens, _key);
    
    repeat(ds_queue_size(_queue))
    {
        ds_list_destroy(ds_queue_dequeue(_queue));
    }
    
    ds_map_delete(pRoomTweens, _key); // remove key from map
    ds_queue_destroy(_queue); // destroy room data queue
}

//------------------------------------------
// Destroy Delay Data for Persistent Rooms
//------------------------------------------
repeat(ds_map_size(pRoomDelays))
{
    var _key = ds_map_find_first(pRoomDelays);
    var _queue = ds_map_find_value(pRoomDelays, _key);
    
    repeat(ds_queue_size(_queue))
    {
        ds_list_destroy(ds_queue_dequeue(_queue));
    }
    
    ds_map_delete(pRoomDelays, _key); // remove key from map
    ds_queue_destroy(_queue); // destroy room data queue
}

//---------------------------------------
// Destroy Data Structures
//---------------------------------------
ds_list_destroy(tweens);
ds_list_destroy(delayedTweens);
ds_map_destroy(simpleTweens);
ds_map_destroy(pRoomTweens);
ds_map_destroy(pRoomDelays);
ds_stack_destroy(destroyStack);
ds_priority_destroy(delayCleaner);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Run Automated System


var _tweens = tweens; // Cache tweens list
var _systemTimeScale = timeScale; // Cache system time scale
var _index, _size; // Declare variables for loop iteration

//--------------------------
//  Manage Delta Timing
//--------------------------

// Store previous delta time
var _prevDeltaTime = deltaTime;

// Calculate new delta time value
deltaTime = delta_time / 1000000;

// Restrict framerate to prevent sporadic delta timing
if (deltaTime &gt; maxDelta)
{
    deltaTime = clamp(_prevDeltaTime, _prevDeltaTime, maxDelta);
}

// Cache delta time affected by time scale
var _deltaTimeScaled = deltaTime * _systemTimeScale; 


//--------------------------------------------------
// Process Automated Tween System
//--------------------------------------------------
if (isActive)
{           
    tick++;
    while(tick &gt;= updateInterval)
    {
        tick -= updateInterval;
        
        //---------------------------------
        // Delayed Tween Management
        //---------------------------------
        
        // Destroy canceled tween delays
        repeat(ds_priority_size(delayCleaner))
        {
            // Fetch tween delay data to be destroyed
            var _delay = ds_priority_delete_min(delayCleaner);
            
            // Find index of data in delayed tweens list
            var _index = ds_list_find_index(delayedTweens, _delay);

            // Remove delay data from the delayed tween list
            ds_list_delete(delayedTweens, _index);
            
            // Destroy tween delay data
            ds_list_destroy(_delay);
        }
        
        // Process timers
        _index = -1;
        _size = ds_list_size(delayedTweens);
        while(++_index &lt; _size)
        {
            // Cache tween delay data
            var _delay = ds_list_find_value(delayedTweens, _index); 
            
            // Cache tween associated with delay data
            var _tween = ds_list_find_value(_delay, 0);
            
            // Cache instance associated with delay data 
            var _instance = ds_list_find_value(_tween, 0);
    
            // IF instance exists, process delayed tween
            // ELSE attempt to remove delayed tween
            if (instance_exists(_instance))
            {   
                // IF timer is active
                if (ds_list_find_value(_delay, 9))
                {
                    var _time;
                    
                    // IF delta tween, count down using delta timer
                    // ELSE count down using step timer
                    if (ds_list_find_value(_delay, 8))
                    {
                        _time = ds_list_find_value(_delay, 6) - abs(_deltaTimeScaled * ds_list_find_value(_tween, 10));
                    }
                    else
                    {
                        _time = ds_list_find_value(_delay, 6) - abs(_systemTimeScale * ds_list_find_value(_tween, 10));
                    }
                    
                    // Assign updated time
                    ds_list_replace(_delay, 6, _time); 
                    
                    // IF the delay timer has expired
                    if (_time &lt;= 0)
                    {
                        // Play tween using values stored in delay data
                        TweenPlayOnce(_tween, ds_list_find_value(_delay,1), ds_list_find_value(_delay,2), ds_list_find_value(_delay,3), ds_list_find_value(_delay,4), ds_list_find_value(_delay,5));
                        
                        // Set tween to use appropriate playmode
                        TweenSetPlayMode(_tween, ds_list_find_value(_delay,7));
                        
                        // Decrement loop iteration size
                        _size--;
                        
                        // Remove delay data from scheduler and decrement loop index
                        ds_list_delete(delayedTweens, _index--);
                        
                        // Destroy delay data
                        ds_list_destroy(_delay);
                    }
                }
            }
            else
            {
                // Attempt to reactivate instance
                instance_activate_object(_instance) 
                
                // IF instance exists, put back to deactivated state
                // ELSE remove delayed tween data
                if (instance_exists(_instance)) 
                {
                    instance_deactivate_object(_instance);
                }
                else
                {
                    // Decrement loop iteration size
                    _size--;
                    
                     // Remove delay data from scheduler and decrement loop index
                    ds_list_delete(delayedTweens, _index--);
                    
                    // Destroy delay data
                    ds_list_destroy(_delay);
                }
            }
        }
        
        //--------------------------------------------------
        // Process Tweens
        //--------------------------------------------------
        _index = -1;
        _size = ds_list_size(_tweens);
        while(++_index &lt; _size)
        {
            // Cache tween
            var _tween = ds_list_find_value(_tweens, _index); 
            
            // Cache tweened instance
            var _instance = ds_list_find_value(_tween, 0); 
            
            // IF tweened instance exists, continue processing
            // ELSE mark tween for destruction
            if (instance_exists(_instance))
            {
                // IF tween state is active, continue processing
                if (ds_list_find_value(_tween, 11))
                { 
                    // IF tween uses delta time, update by seconds
                    // ELSE update by steps
                    if (ds_list_find_value(_tween, 21))
                    {
                        // Adjust time by tween's time scale multiplied by system scaled delta time
                        var _time = ds_list_find_value(_tween, 9) + ds_list_find_value(_tween, 10) * _deltaTimeScaled;
                    }
                    else
                    {
                        // Adjust time by tween's time scale multiplied by system time scale
                        var _time = ds_list_find_value(_tween, 9) + ds_list_find_value(_tween, 10) * _systemTimeScale;
                    }
                    
                    // Assign updated time to tween
                    ds_list_replace(_tween, 9, _time);
                    
                    // Cache tween duration
                    var _duration = ds_list_find_value(_tween, 4);
                    
                    // IF time between start and finish, update tweened property
                    // ELSE the start or finish boundary has been reached
                    if ((_time &gt; 0) &amp;&amp; (_time &lt; _duration))
                    {
                        with(_instance) script_execute(ds_list_find_value(_tween, 1), script_execute(ds_list_find_value(_tween, 5), _time, ds_list_find_value(_tween, 2), ds_list_find_value(_tween, 8), _duration));
                    }
                    else 
                    if (_systemTimeScale != 0 &amp;&amp; ds_list_find_value(_tween, 10) != 0)
                    {       
                        // Update tween properties based on playmode
                        switch(ds_list_find_value(_tween, 6))
                        {
                        case TWEEN_PLAY_ONCE:
                            // Set tween state as 'stopped'
                            ds_list_replace(_tween, 11, -1); 
                            
                            if (_time &gt; 0)
                            {
                                // Set tweened variable to destination
                                with(_instance) script_execute(ds_list_find_value(_tween, 1), ds_list_find_value(_tween, 3));
                            }
                            else
                            {
                                // Set tweened variable to start position
                                with(_instance) script_execute(ds_list_find_value(_tween, 1), ds_list_find_value(_tween, 2));
                            }
                            
                            // Execute finish event
                            ExecuteTweenEvent(ds_list_find_value(_tween, 14));
                            break;
                            
                        case TWEEN_PLAY_LOOP:
                            // IF tween's time is positive, jump to start
                            // ELSE jump to the end
                            if (_time &gt; 0)
                            {
                                // Set time back to start
                                ds_list_replace(_tween, 9, 0);
                                
                                // Set tweened variable to destination
                                with(_instance) script_execute(ds_list_find_value(_tween, 1), ds_list_find_value(_tween, 3));
                                
                            }
                            else 
                            {
                                // Set time to duration
                                ds_list_replace(_tween, 9, TweenGetDuration(_tween));
                                
                                // Set tweened variable to start position
                                with(_instance) script_execute(ds_list_find_value(_tween, 1), ds_list_find_value(_tween, 2));
                            }
                                
                            // Execute loop event
                            ExecuteTweenEvent(ds_list_find_value(_tween, 18));
                            break;
                            
                        case TWEEN_PLAY_REPEAT:
                            if (_time &gt; 0)
                            {
                                // Set time back to start
                                ds_list_replace(_tween, 9, 0);
                                
                                // Set tweened variable to destination
                                with(_instance) script_execute(ds_list_find_value(_tween, 1), ds_list_find_value(_tween, 3));
                                
                                // Cache tween destination
                                var _dest = TweenGetDestination(_tween);
                                
                                // Calculate new destination
                                var _newDest = _dest + TweenGetChange(_tween);
                                
                                // Set start position to previous destination
                                ds_list_replace(_tween, 2, _dest);
                                
                                // Set new destination
                                TweenSetDestination(_tween, _newDest);
                            }
                            else
                            {
                                // Set time to duration
                                ds_list_replace(_tween, 9, TweenGetDuration(_tween));
                                
                                // Set tweened variable to start position
                                with(_instance) script_execute(ds_list_find_value(_tween, 1), ds_list_find_value(_tween, 2));
                                
                                // Cache start position
                                var _start = TweenGetStart(_tween);
                                
                                // Calculate new starting position
                                var _newStart = _start - TweenGetChange(_tween);
                                
                                // Assign new starting position
                                ds_list_replace(_tween, 2, _newStart);
                                
                                // Set destination to previous start position
                                TweenSetDestination(_tween, _start)
                            }
                            
                            // Execute repeat event
                            ExecuteTweenEvent(ds_list_find_value(_tween, 19));
                            break;
                            
                        case TWEEN_PLAY_BOUNCE:
                            // IF time larger than 0, bounce the tween back to start
                            // ELSE have the tween finish
                            if (_time &gt; 0)
                            {
                                // Adjust for time "overflow"
                                ds_list_replace(_tween, 9, _duration - (_time - _duration));
                                
                                // Set tweened variable to destination
                                with(_instance) script_execute(ds_list_find_value(_tween, 1), ds_list_find_value(_tween, 3));
                            
                                // Reverse tween direction
                                TweenReverse(_tween);
                                
                                // Execute bounce event
                                ExecuteTweenEvent(ds_list_find_value(_tween, 20));
                            }
                            else
                            {
                                // Stop tween
                                ds_list_replace(_tween, 11, -1); 
                                
                                // Set tweened variable to start
                                with(_instance) script_execute(ds_list_find_value(_tween, 1), ds_list_find_value(_tween, 2)); 
                                
                                // Execute finish event
                                ExecuteTweenEvent(ds_list_find_value(_tween, 14)); 
                            }
                            break;
                            
                        case TWEEN_PLAY_PATROL:
                            // Adjust for time "overflow"
                            if (_time &gt; 0)
                            {
                                // Step back if needed
                                ds_list_replace(_tween, 9, _duration - (_time - _duration));
                                
                                // Set tweened variable to destination
                                with(_instance) script_execute(ds_list_find_value(_tween, 1), ds_list_find_value(_tween, 3));
                                
                            }
                            else
                            {
                                // Step forward if needed
                                ds_list_replace(_tween, 9, -_time);
                                
                                // Set tweened variable to start position
                                with(_instance) script_execute(ds_list_find_value(_tween, 1), ds_list_find_value(_tween, 2));
                            }
                            
                            // Reverse tween direction
                            TweenReverse(_tween);
                            
                            // Execute bounce event
                            ExecuteTweenEvent(ds_list_find_value(_tween, 20));
                            break;
                            
                        default: 
                            // Display warning message
                            show_error("Invalid Tween Play Mode!", false);
                            
                            // Destroy tween so game can continue without further errors
                            TweenDestroy(_tween);
                        }
                    }
                } 
            }
            else 
            {
                // Attempt to reactivate in case it has been deactivated
                instance_activate_object(_instance); 
                
                // IF instance now exists, put instance back to deactivated state
                // ELSE designate tween for destruction
                if (instance_exists(_instance))
                {
                    instance_deactivate_object(_instance);
                }
                else
                {
                    // Reduce loop iteration size
                    _size--; 
                    
                    // Remove tween from tweens list and decrement loop index
                    ds_list_delete(_tweens, _index--); 
                    
                    // Push tween to destruction stack for final clean up
                    ds_stack_push(destroyStack, _tween);
                    
                    // Set tween state as 'destroyed'
                    ds_list_replace(_tween, 11, -2);
                }
            }
        }
    }
}

//--------------------------------------------------
// Final Tween Destruction (Tween Hell)
//--------------------------------------------------
repeat(clamp(ds_stack_size(destroyStack), 0, destroyStackMaxPop))
{
    // Pop tween off stack
    var _tween = ds_stack_pop(destroyStack);

    // IF a simple tween, delete simple tween data
    if (ds_list_find_value(_tween, 7) != -1)
    {
        ds_map_delete(simpleTweens, ds_list_find_value(_tween, 7));
    }
    
    //---------------------------------
    // Tween Event Data Destruction
    // Written inline for performance
    //---------------------------------
    
    // Destroy event and all its callbacks if initialized
    if (ds_list_find_value(_tween, 13) != -1)
    {
        // Cache event
        var _event = ds_list_find_value(_tween, 13);
        
        // Cycle through and destroy all callbacks
        _index = ds_list_size(_event);
        while(_index--)
        {
            ds_list_destroy(ds_list_find_value(_event, _index)); 
        }
        
        // Destroy event
        ds_list_destroy(_event); 
    }
    
    // Destroy event and all its callbacks if initialized
    if (ds_list_find_value(_tween, 14) != -1)
    {
        // Cache event
        var _event = ds_list_find_value(_tween, 14);
        
        // Cycle through and destroy all callbacks
        _index = ds_list_size(_event);
        while(_index--)
        {
            ds_list_destroy(ds_list_find_value(_event, _index)); 
        }
        
        // Destroy event
        ds_list_destroy(_event); 
    }
    
    // Destroy event and all its callbacks if initialized
    if (ds_list_find_value(_tween, 15) != -1)
    {
        // Cache event
        var _event = ds_list_find_value(_tween, 15);
        
        // Cycle through and destroy all callbacks
        _index = ds_list_size(_event);
        while(_index--)
        {
            ds_list_destroy(ds_list_find_value(_event, _index)); 
        }
        
        // Destroy event
        ds_list_destroy(_event); 
    }
    
    // Destroy event and all its callbacks if initialized
    if (ds_list_find_value(_tween, 16) != -1)
    {
        // Cache event
        var _event = ds_list_find_value(_tween, 16);
        
        // Cycle through and destroy all callbacks
        _index = ds_list_size(_event);
        while(_index--)
        {
            ds_list_destroy(ds_list_find_value(_event, _index)); 
        }
        
        // Destroy event
        ds_list_destroy(_event); 
    }
    
    // Destroy event and all its callbacks if initialized
    if (ds_list_find_value(_tween, 17) != -1)
    {
        // Cache event
        var _event = ds_list_find_value(_tween, 17);
        
        // Cycle through and destroy all callbacks
        _index = ds_list_size(_event);
        while(_index--)
        {
            ds_list_destroy(ds_list_find_value(_event, _index)); 
        }
        
        // Destroy event
        ds_list_destroy(_event); 
    }
    
    // Destroy event and all its callbacks if initialized
    if (ds_list_find_value(_tween, 18) != -1)
    {
        // Cache event
        var _event = ds_list_find_value(_tween, 18);
        
        // Cycle through and destroy all callbacks
        _index = ds_list_size(_event);
        while(_index--)
        {
            ds_list_destroy(ds_list_find_value(_event, _index)); 
        }
        
        // Destroy event
        ds_list_destroy(_event); 
    }
    
    // Destroy event and all its callbacks if initialized
    if (ds_list_find_value(_tween, 19) != -1)
    {
        // Cache event
        var _event = ds_list_find_value(_tween, 19);
        
        // Cycle through and destroy all callbacks
        _index = ds_list_size(_event);
        while(_index--)
        {
            ds_list_destroy(ds_list_find_value(_event, _index)); 
        }
        
        // Destroy event
        ds_list_destroy(_event); 
    }
    
    // Destroy event and all its callbacks if initialized
    if (ds_list_find_value(_tween, 20) != -1)
    {
        // Cache event
        var _event = ds_list_find_value(_tween, 20);
        
        // Cycle through and destroy all callbacks
        _index = ds_list_size(_event);
        while(_index--)
        {
            ds_list_destroy(ds_list_find_value(_event, _index)); 
        }
        
        // Destroy event
        ds_list_destroy(_event); 
    }
    
    //------------------------
    // Destroy tween data
    //------------------------   
    ds_list_destroy(_tween); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///  System Cleanup --&gt; Determine Persistence
 
var _tweens = tweens;
var _simpleTweens = simpleTweens;
var _delayedTweens = delayedTweens;
var _destroyStack = destroyStack;
var _makePersistent = false;

//-----------------------------------
// Destroy canceled delay data
//-----------------------------------
repeat(ds_priority_size(delayCleaner))
{
    var _delay = ds_priority_delete_min(delayCleaner);
    var _index = ds_list_find_index(delayedTweens, _delay);
    
    ds_list_delete(delayedTweens, _index);
    ds_list_destroy(_delay);
}

if (room_persistent == false)
{ 
    //------------------------------------------------
    // Destroy tweens for non-persistent instances
    //------------------------------------------------
    var _index = ds_list_size(_tweens)
    while(_index--)
    {  
        var _tween = ds_list_find_value(_tweens, _index);
        var _instance = ds_list_find_value(_tween, 0);
        
        if (instance_exists(_instance))
        {
            if (_instance.persistent)
            {
                // Signal tweening system to be persistent
                _makePersistent = true;
            }
            else 
            {
                // Remove tween from tween list
                ds_list_delete(_tweens, _index);
                
                // Designate tween for destruction 
                ds_stack_push(_destroyStack, _tween);
            }
        }
        else
        {
            // Remove tween from tween list
            ds_list_delete(_tweens, _index); 
            
            // Designate tween for destruction 
            ds_stack_push(_destroyStack, _tween);
        }
    }
    
    //------------------------------
    // Clean Up Delayed Tweens
    //------------------------------
    var _index = ds_list_size(_delayedTweens);
    while(_index--)
    {
        // Cache Delay Data from Scheduled Tweens List
        var _delayData = ds_list_find_value(_delayedTweens, _index);
        var _tween = ds_list_find_value(_delayData, 0);
        var _instance = ds_list_find_value(_tween, 0);
        
        if (instance_exists(_instance))
        {
            if (_instance.persistent)
            {
                // Signal tweening system to be made persistent
                _makePersistent = true;
            }
            else
            {   
                // Remove scheduled tween from list    
                ds_list_delete(_delayedTweens, _index); 
                
                // Destroy delay data
                ds_list_destroy(_delayData);
            }
        }
        else
        {
            // Remove scheduled tween from list
            ds_list_delete(_delayedTweens, _index); 
            
            // Destroy delay data
            ds_list_destroy(_delayData); // Destroy Delay Data
        }
    } 
}
else
{
    //------------------------------------------
    // Manage Tweens for Persistent Room
    //------------------------------------------
    
    keepAlive = true;
    var _key = room;
    
    // Create persistent queue for room if it doesn't exist
    if (ds_map_exists(pRoomTweens, _key) == false)
    {
        ds_map_replace(pRoomTweens, _key, ds_queue_create());
    }
    
    // Cache room's tween queue
    var _pRoomQueue = ds_map_find_value(pRoomTweens, _key);
    
    // Add tweens to persistent room data 
    var _index = ds_list_size(_tweens)
    while(_index--)
    {  
        var _tween = ds_list_find_value(_tweens, _index);
        var _instance = ds_list_find_value(_tween, 0);
        
        if (instance_exists(_instance))
        {
            if (_instance.persistent == false)
            {
                // Add to persistent room queue
                ds_queue_enqueue(_pRoomQueue, _tween); 
                
                // Remove from main tween list
                ds_list_delete(_tweens, _index);
            }
        }
        else
        {
            // Remove tween from main list
            ds_list_delete(_tweens, _index); 
            
            // Designate tween for destruction
            ds_stack_push(_destroyStack, _tween);
        }
    }
    
    //-------------------------------------------------
    // Manage Delayed Tweens for Persistent Room
    //-------------------------------------------------
    
    // Create queue for holding persistent room's delay data
    if (ds_map_exists(pRoomDelays, _key) == false)
    {
        ds_map_replace(pRoomDelays, _key, ds_queue_create());
    }
    
    // Cache persistent room's delay data queue
    var _pRoomDelayQueue = ds_map_find_value(pRoomDelays, _key);
    
    var _index = ds_list_size(_delayedTweens);
    while(_index--)
    {
        var _delayData = ds_list_find_value(_delayedTweens, _index); // Cache delay data
        var _tween = ds_list_find_value(_delayData, 0); // Cache tween
        var _instance = ds_list_find_value(_tween, 0); // Cache instance of delayed tween
        
        //  IF instance exists, process delayed tween
        //  ELSE remove delayed tween
        if (instance_exists(_instance))
        {
            if (_instance.persistent == false)
            {
                // Add to persistent room queue
                ds_queue_enqueue(_pRoomDelayQueue, _delayData);
                
                // Remove from main delay list
                ds_list_delete(_delayedTweens, _index);
            }
        }
        else
        {
            // Remove delay data from main delay list
            ds_list_delete(_delayedTweens, _index);
            
            // Destroy delay data
            ds_list_destroy(_delayData)
        }
    }
}

//---------------------------------------
// Final Tween Destruction (Tween Hell)
//---------------------------------------
repeat(ds_stack_size(_destroyStack))
{
    // Cache tween data
    var _tween = ds_stack_pop(_destroyStack); 
    
    //  IF a simple tween, delete simpleTweens map key
    if (ds_list_find_value(_tween, 7) != -1)
    {
        ds_map_delete(simpleTweens, ds_list_find_value(_tween, 7));
    }
    
    //  Destroy Tween Events
    for (var i = 13; i &lt;= 20; i++)
    {
        if (ds_list_find_value(_tween, i) != -1)
        {
            // Cache event
            var _event = ds_list_find_value(_tween, i); 
            
            // Find max event index
            var _index = ds_list_size(_event);
            
            // Cycle through and destroy all callbacks
            while(_index--)
            {
                ds_list_destroy(ds_list_find_value(_event, _index)); 
            }
            
            // destroy event
            ds_list_destroy(_event); 
        }
    }
    
    //  Destroy tween data
    ds_list_destroy(_tween); 
}  

//-----------------------------------------------------
// Destroy Shared Tweener if not set as persistent
//-----------------------------------------------------
if (_makePersistent || keepAlive) 
{
    persistent = true;
}
else 
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Merge Persistent Room Tweens Back Into Tween List

if (room_persistent)
{
    keepAlive = true;
    
    var _tweens = tweens; // Cache tweens list
    var _key = room; // Cache room name for map key
    
    // Add existing tweens back into main tween list
    if (ds_map_exists(pRoomTweens, _key))
    {
        var _qTweens = ds_map_find_value(pRoomTweens, _key); // Cache queue of room's tweens
        
        repeat(ds_queue_size(_qTweens))
        {
            ds_list_add(_tweens, ds_queue_dequeue(_qTweens));
        }
    }
    
    // Add existing delayed tweens back into scheduler
    if (ds_map_exists(pRoomDelays, _key))
    {
        var _qDelays = ds_map_find_value(pRoomDelays, _key); // Cache queue of room's delayed tweens
        
        repeat(ds_queue_size(_qDelays))
        {
            ds_list_add(delayedTweens, ds_queue_dequeue(_qDelays));
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
